"""
Django settings for core project.
Generated by 'django-admin startproject' using Django 5.1.7.
For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

import dj_database_url
import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
dotenv.load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# Set to True when running tests
TESTING = 'test' in sys.argv

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    # Local apps
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'api.db_utils.DatabaseConnectionMiddleware',  # Database connection health check
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'api.ratelimit_middleware.RateLimitMiddleware',  # Rate limiting middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.middleware.PerformanceMonitoringMiddleware',  # Performance monitoring
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Parse the database URL
DATABASES = {
    'default': dj_database_url.config(conn_max_age=600)
}

# Special configuration for testing with Supabase
if 'test' in sys.argv:
    # For testing, use the same database but with a test schema
    # This prevents Django from trying to create/drop databases
    DATABASES['default']['TEST'] = {
        'NAME': DATABASES['default']['NAME'],  # Use the same database
        'CREATE_DB': False,  # Don't create a new database
        'CREATE_SCHEMA': True,  # Create a new schema for tests
    }

# Database connection settings for better reliability
DATABASE_CONNECTION_RETRY_ATTEMPTS = 3
DATABASE_CONNECTION_RETRY_DELAY = 1  # seconds

# Use our custom test runner for Supabase
TEST_RUNNER = 'core.test_runner.SupabaseTestRunner'

# Default database timeout settings
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Bangkok'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')
CORS_ALLOW_CREDENTIALS = True

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# Caching Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'ta-project-cache',
        'TIMEOUT': 300,  # 5 minutes default timeout
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        },
    },
    'redis': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Rate limiting backend - fall back to default cache if Redis unavailable
RATELIMIT_USE_CACHE = 'redis' if os.getenv('REDIS_URL') else 'default'

# Rate Limiting Configuration
RATELIMIT_ENABLE = os.getenv('RATELIMIT_ENABLE', 'True') == 'True'

# Rate limits for different user types (requests per minute)
RATE_LIMITS = {
    'UNAUTHENTICATED': {
        'GET': '100/m',      # 100 GET requests per minute
        'POST': '20/m',      # 20 POST requests per minute
        'PUT': '10/m',       # 10 PUT requests per minute
        'DELETE': '5/m',     # 5 DELETE requests per minute
    },
    'AUTHENTICATED': {
        'GET': '300/m',      # 300 GET requests per minute
        'POST': '100/m',     # 100 POST requests per minute
        'PUT': '50/m',       # 50 PUT requests per minute
        'DELETE': '20/m',    # 20 DELETE requests per minute
    },
    'ADMIN': {
        'GET': '1000/m',     # 1000 GET requests per minute
        'POST': '500/m',     # 500 POST requests per minute
        'PUT': '200/m',      # 200 PUT requests per minute
        'DELETE': '100/m',   # 100 DELETE requests per minute
    },
    'DETECTION_ENDPOINT': {
        'POST': '500/m',     # Higher limit for detection data ingestion
    }
}

# Rate limit headers to include in responses
RATELIMIT_HEADERS = {
    'ENABLE': True,
    'LIMIT_HEADER': 'X-RateLimit-Limit',
    'REMAINING_HEADER': 'X-RateLimit-Remaining',
    'RESET_HEADER': 'X-RateLimit-Reset',
}

# Cache timeouts for different data types
CACHE_TIMEOUTS = {
    'TODAY_STATS': 60,  # 1 minute for today's stats (frequently updated)
    'RANGE_STATS': 600,  # 10 minutes for range stats (improved caching for analytics)
    'DAILY_AGGREGATION': 1800,  # 30 minutes for daily aggregation (more stable data)
    'MONTHLY_AGGREGATION': 3600,  # 1 hour for monthly aggregation (very stable data)
    'MODEL_SETTINGS': 3600,  # 1 hour for model settings (rarely changed)
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'api.middleware': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'api.cache_service': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'api.views': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': [],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}
